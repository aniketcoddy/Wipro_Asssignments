Assignment 2: Design a database schema for a library system, including tables, fields, and constraints like NOT NULL, UNIQUE, and CHECK. Include primary and foreign keys to establish relationships between tables.
### Tables and Fields


1. **Books**
   - `book_id` (Primary Key)
   - `title` (NOT NULL)
   - `isbn` (UNIQUE, NOT NULL)
   - `publication_year` (CHECK (publication_year > 0))
   - `publisher_id` (Foreign Key referencing `Publishers.publisher_id`, NOT NULL)
   - `author_id` (Foreign Key referencing `Authors.author_id`, NOT NULL)

2. **Authors**
   - `author_id` (Primary Key)
   - `first_name` (NOT NULL)
   - `last_name` (NOT NULL)

3. **Publishers**
   - `publisher_id` (Primary Key)
   - `name` (UNIQUE, NOT NULL)

4. **Members**
   - `member_id` (Primary Key)
   - `first_name` (NOT NULL)
   - `last_name` (NOT NULL)
   - `email` (UNIQUE, NOT NULL)
   - `phone` (NOT NULL)

5. **Loans**
   - `loan_id` (Primary Key)
   - `book_id` (Foreign Key referencing `Books.book_id`, NOT NULL)
   - `member_id` (Foreign Key referencing `Members.member_id`, NOT NULL)
   - `loan_date` (NOT NULL)
   - `return_date` (Nullable, to accommodate ongoing loans)

6. **Categories**
   - `category_id` (Primary Key)
   - `category_name` (UNIQUE, NOT NULL)

7. **BookCategories**
   - `book_id` (Foreign Key referencing `Books.book_id`, NOT NULL)
   - `category_id` (Foreign Key referencing `Categories.category_id`, NOT NULL)
   - Primary Key (`book_id`, `category_id`)

### SQL Statements

#### Books Table

```sql
CREATE TABLE Books (
    book_id INT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    isbn VARCHAR(13) UNIQUE NOT NULL,
    publication_year INT CHECK (publication_year > 0),
    publisher_id INT NOT NULL,
    author_id INT NOT NULL,
    FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id),
    FOREIGN KEY (author_id) REFERENCES Authors(author_id)
);
```

#### Authors Table

```sql
CREATE TABLE Authors (
    author_id INT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL
);
```

#### Publishers Table

```sql
CREATE TABLE Publishers (
    publisher_id INT PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL
);
```

#### Members Table

```sql
CREATE TABLE Members (
    member_id INT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20) NOT NULL
);
```

#### Loans Table

```sql
CREATE TABLE Loans (
    loan_id INT PRIMARY KEY,
    book_id INT NOT NULL,
    member_id INT NOT NULL,
    loan_date DATE NOT NULL,
    return_date DATE,
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (member_id) REFERENCES Members(member_id)
);
```

#### Categories Table

```sql
CREATE TABLE Categories (
    category_id INT PRIMARY KEY,
    category_name VARCHAR(100) UNIQUE NOT NULL
);
```

#### BookCategories Table

```sql
CREATE TABLE BookCategories (
    book_id INT NOT NULL,
    category_id INT NOT NULL,
    PRIMARY KEY (book_id, category_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (category_id) REFERENCES Categories(category_id)
);
```

### Relationships

1. **Books and Authors**: Each book is written by one author (foreign key in `Books`).
2. **Books and Publishers**: Each book is published by one publisher (foreign key in `Books`).
3. **Books and Categories**: Each book can belong to multiple categories and each category can include multiple books (many-to-many relationship handled by `BookCategories`).
4. **Members and Loans**: Each loan is made by one member (foreign key in `Loans`).
5. **Books and Loans**: Each loan involves one book (foreign key in `Loans`).
